// **** Helper Mixins Collection  **** //

// Convert pixel values to rem function.
@function stripUnit($value) {
    @return $value / ($value * 0 + 1);
  }
  
  @function rem($pxValue) {
    @return #{stripUnit($pxValue) / stripUnit(size('root'))}rem;
  }
  
  // *** Grid mixin *** //
  /// Add Gap between the boxes
  @function box-gap($boxes, $gap) {
    $box: ();
  
    @for $i from 1 through length($boxes) {
      $box: append($box, nth($boxes, $i), space);
  
      // Adding Gap Between
      @if $gap >= 0 {
        // Not last Loop
        @if $i != length($boxes) {
          $box: append($box, $gap, space);
        }
      }
    }
  
    @return $box;
  }
  /// To build Grid Template Columns with optional gap
  /// @example scss - scss
  ///   .test {
  ///     @include grid-columns(10px 250px 1fr 50px 100px);
  ///   }
  @mixin grid-columns($gap, $columns) {
    grid-template-columns: $columns;
  
    @if $gap >= 0 {
      grid-column-gap: $gap;
    }
  
    -ms-grid-columns: box-gap($columns, $gap);
  }
  /// To build Grid Template Rows with optional gap
  /// @example scss - scss
  ///   .test {
  ///     @include grid-rows(10px 1fr);
  ///   }
  @mixin grid-rows($gap, $rows) {
    grid-template-rows: $rows;
  
    @if $gap >= 0 {
      grid-row-gap: $gap;
    }
  
    -ms-grid-rows: box-gap($rows, $gap);
  }
  /// Generates IE10/11 grid placement to simulate grid-auto-flow.
  /// @example scss -
  ///   .quotes {
  ///     @include grid-autoflow(autoflow: column, columns: 3, rows: 6, gap: both);
  ///   }
  @mixin grid-autoflow($data) {
    $autoflow: map-get($data, autoflow);
    $columns: map-get($data, columns);
    $rows: map-get($data, rows);
  
    $columnGap: false;
    $rowGap: false;
  
    @if (map-get($data, 'gap') == 'column') {
      $columnGap: true;
      $rowGap: false;
    } @else if (map-get($data, gap) == 'row') {
      $columnGap: false;
      $rowGap: true;
    } @else if (map-get($data, gap) == 'both') {
      $columnGap: true;
      $rowGap: true;
    } @else if (map-get($data, gap) == 'neither') {
      $columnGap: false;
      $rowGap: false;
    } @else {
      @error 'The 'gap' argument must be one of 'column', 'row', 'both', or 'neither'';
    }
  
    @if ($columnGap) {
      $columns: $columns * 2 - 1;
    }
  
    @if ($rowGap) {
      $rows: $rows * 2 - 1;
    }
  
    grid-auto-flow: $autoflow;
    $column: 1;
    $row: 1;
    $counter: 1;
  
    @if ($autoflow == 'column') {
      @for $i from 1 through $columns {
        @for $j from 1 through $rows {
          // This element can be filled iff we are not in a row gap or a column gap.
          @if ($i % 2 == 0 and $columnGap) {
            // This is a column gap. Don't place the next element.
          } @else if ($j % 2 == 0 and $rowGap) {
            // This is a row gap. Don't place the next element.
          } @else {
            // Place the next element in column $i and row $j.
            :nth-child(#{$counter}) {
              -ms-grid-column: $i;
              -ms-grid-row: $j;
            }
            $counter: $counter + 1;
          }
        }
      }
    } @else if ($autoflow == 'row') {
      @for $i from 1 through $rows {
        @for $j from 1 through $columns {
          // This element can be filled iff we are not in a row gap or a column gap.
          @if ($i % 2 == 0 and $rowGap) {
            // This is a row gap. Don't place the next element.
          } @else if ($j % 2 == 0 and $columnGap) {
            // This is a column gap. Don't place the next element.
          } @else {
            // Place the next element in row $i and column $j.
            :nth-child(#{$counter}) {
              -ms-grid-column: $j;
              -ms-grid-row: $i;
            }
            $counter: $counter + 1;
          }
        }
      }
    }
  }
  
  /// Mixin for size of block ( width and height )
  @mixin blocksize($width, $height: $width) {
    width: $width;
    height: $height;
  }
  
  // Quick Border
  // Usage definition (use `null` do not fill out)
  /// @example scss - scss
  ///   .test {
  ///    @include border(top, 1px, solid, color('primary'));
  ///   }
  @mixin border($direction, $width, $style, $color) {
    border-#{$direction}: $width $style $color;
  }
  
  // Quick Flexbox
  // Usage definition (use `null` do not fill out)
  /// @example scss - scss
  ///   .test {
  ///    @include flex(row, center, space-between, wrap);
  ///   }
  @mixin flex($direction: null, $align-items: null, $justify-content: null, $flex-wrap: null) {
    display: flex;
    flex-direction: $direction;
    align-items: $align-items;
    justify-content: $justify-content;
    flex-wrap: $flex-wrap;
  }
  
  @mixin item($flex: null, $order: null) {
    flex: $flex;
    order: $order;
  }
  
  @mixin item($flex: null, $order: null) {
    flex: $flex;
    order: $order;
  }
  
  /// Shorthand mixin for offset positioning
  /// @param {String} $position - Either `relative`, `absolute` or `fixed`
  /// @param {Length} $top [null] - Top offset
  /// @param {Length} $right [null] - Right offset
  /// @param {Length} $bottom [null] - Bottom offset
  /// @param {Length} $left [null] - Left offset
  @mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
  }
  
  /// Shorthand mixin for absolute positioning
  /// Serves as an alias for `position(absolute, ...)`
  /// @param {Arglist} $args - Offsets
  /// @require {mixin} position
  @mixin absolute($args...) {
    @include position(absolute, $args...);
  }
  
  /// Shorthand mixin for relative positioning
  /// Serves as an alias for `position(relative, ...)`
  /// @param {Arglist} $args - Offsets
  /// @require {mixin} position
  @mixin relative($args...) {
    @include position(relative, $args...);
  }
  
  /// Shorthand mixin for fixed positioning
  /// Serves as an alias for `position(fixed, ...)`
  /// @param {Arglist} $args - Offsets
  /// @require {mixin} position
  @mixin fixed($args...) {
    @include position(fixed, $args...);
  }
  
  /// generic transform
  @mixin transform($transforms) {
    transform: $transforms;
  }
  /// rotate
  @mixin rotate($deg) {
    @include transform(rotate(#{$deg}deg));
  }
  
  /// scale
  @mixin scale($scale) {
    @include transform(scale($scale));
  }
  /// translate
  @mixin translate($x, $y) {
    @include transform(translate($x, $y));
  }
  
  /// translate X-axis
  @mixin translateX($x) {
    @include transform(translateX($x));
  }
  /// translate Y-axis
  @mixin translateY($y) {
    @include transform(translateY($y));
  }
  /// skew
  @mixin skew($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
  }
  
  ///transform origin
  @mixin transform-origin($origin) {
    transform-origin: $origin;
  }
  
  /// Shorthand mixin for center positioning
  /// @param {Arglist} $args - Offsets
  /// @require {mixin} position
  @mixin center {
    @include position(absolute, 50%, null, null, 50%);
    @include translate(-50%, -50%);
  }
  
  /// Shorthand mixin for block center
  @mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }
  
  /// Shorthand mixin for text align
  /// @param {string} $token - One of keys of $typography map above.
  $text: (
    'left': left,
    'right': right,
    'center': center
  );
  
  @mixin text($token: 'left') {
    text-align: get-token($text, $token);
  }
  
  /// Mixin for size of block ( width and height )
  @mixin max-width($width) {
    width: 100%;
    max-width: $width;
  }
  
  //@access private
  @mixin spacing($type: 'padding', $top: null, $right: null, $bottom: null, $left: null, $all: null) {
    @if (type-of($value: $all) == 'null') {
      #{$type}-top: $top;
      #{$type}-right: $right;
      #{$type}-bottom: $bottom;
      #{$type}-left: $left;
    }
    @else {
      #{$type}: $all;
    }
  }
  
  /// Mixin to unpack all spacing types
  @mixin padding($top: null, $right: null, $bottom: null, $left: null, $all: null) {
    @include spacing($type: 'padding', $top: $top, $right: $right, $bottom: $bottom, $left: $left, $all: $all);
  }
  
  
  @mixin margin($top: null, $right: null, $bottom: null, $left: null, $all: null) {
    @include spacing($type: 'margin', $top: $top, $right: $right, $bottom: $bottom, $left: $left, $all: $all);
  }