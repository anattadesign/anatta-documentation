(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{438:function(e,t,s){e.exports=s.p+"assets/img/repeat-items.264fbc30.png"},439:function(e,t,s){e.exports=s.p+"assets/img/repeat-doc.dc1bf07e.png"},440:function(e,t,s){e.exports=s.p+"assets/img/repeat-metafields.c5cbb74e.png"},441:function(e,t,s){e.exports=s.p+"assets/img/repeat-count.e40301ff.png"},469:function(e,t,s){"use strict";s.r(t);var a=s(35),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"lets-quickly-revise-our-prismic-setup-for-page"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lets-quickly-revise-our-prismic-setup-for-page"}},[e._v("#")]),e._v(" Lets quickly revise our prismic setup for page.")]),e._v(" "),a("div",{staticClass:"block-space"}),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Custom Types > Test\n")])])]),a("img",{attrs:{src:s(438)}}),e._v(" "),a("div",{staticClass:"block-space"}),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Documents > Test Page\n")])])]),a("div",{staticClass:"block-space"}),e._v(" "),a("img",{attrs:{src:s(439)}}),e._v(" "),a("div",{staticClass:"block-space"}),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Shopify > Test Page metafields\n")])])]),a("div",{staticClass:"block-space"}),e._v(" "),a("img",{attrs:{src:s(440)}}),e._v(" "),a("div",{staticClass:"block-space"}),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"next-steps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#next-steps"}},[e._v("#")]),e._v(" NEXT STEPS")]),e._v(" "),a("div",{staticClass:"block-section"}),e._v(" "),a("h2",{attrs:{id:"get-total-count-of-repeatable-item-in-a-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-total-count-of-repeatable-item-in-a-namespace"}},[e._v("#")]),e._v(" Get total count of repeatable item in a namespace")]),e._v(" "),a("p",[e._v("There is a metafield that keeps count of all the repeated zone items. USe that metafield key to fetch total count of repeatable items.\n")]),a("div",{staticClass:"block-space"}),e._v(" "),a("img",{attrs:{src:s(441)}}),e._v(" "),a("div",{staticClass:"block-space"}),a("p"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{%- assign length = section.count | minus: 1 -%}\n")])])]),a("div",{staticClass:"block-space"}),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"loop-within-that-count-and-generate-the-metafields-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loop-within-that-count-and-generate-the-metafields-key"}},[e._v("#")]),e._v(" Loop within that count, and generate the metafields key")]),e._v(" "),a("div",{staticClass:"block-space"}),e._v(" "),a("p",[e._v("As each of the "),a("strong",[e._v("metafields key")]),e._v(" of "),a("strong",[e._v("repeated item")]),e._v(" ,have a "),a("strong",[e._v("index added")]),e._v(".")]),e._v(" "),a("p",[e._v("We can "),a("strong",[e._v("loop")]),e._v(" within the "),a("strong",[e._v("total number of repeated item")]),e._v(" and then "),a("strong",[e._v("add index")]),e._v(" to "),a("strong",[e._v("placeholder id")]),e._v(".")]),e._v(" "),a("p",[e._v("Learn more about "),a("a",{staticClass:"green-link",attrs:{href:"../code-integration.html#get-metafields-namespace-and-key-for-the-created-snippets"}},[e._v("metafields key and placeholder id")])]),a("div",{staticClass:"block-space"}),a("p"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div class="item__list">\n    {% for index in (0..length) %}\n    {%- assign title = \'block_title_\' | append: index -%}\n    {%- assign description = \'block_description_\' | append: index -%}\n       <div class="item__single">\n         <h2 class="item__title">{{title}}</h2>\n         <p class="item__text">{{description}}</p>\n       </div>\n    {% endfor %}\n</div>\n')])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("Use "),a("strong",[e._v("snake_case")]),e._v(" for liquid variables.")])]),e._v(" "),a("div",{staticClass:"block-space"}),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"full-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#full-code"}},[e._v("#")]),e._v(" Full Code")]),e._v(" "),a("div",{staticClass:"block-space"}),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('snippets/test-slice.liquid\n\n\x3c!-- fetch metafields based on namespace(slice_test) --\x3e\n{% assign section = metafields[module] %} \n\n<! -- fetch total number of repetable items based on namespace --\x3e\n{%- assign length = section.count | minus: 1 -%}\n\n\x3c!-- Render data --\x3e\n<div class="item__list">\n   \x3c!--  Loop within the total count  --\x3e\n    {% for index in (0..length) %}\n       \x3c!-- Generate metafields key --\x3e\n        {%- assign title = \'block_title_\' | append: index -%} \n        {%- assign description = \'block_description_\' | append: index -%}\n       <div class="item__single">\n         <h2 class="item__title">{{section[title]}}</h2> \n         <p class="item__text">{{section[description]}}</p>\n       </div>\n    {% endfor %}\n</div>\n')])])]),a("div",{staticClass:"block-space"})])}),[],!1,null,null,null);t.default=i.exports}}]);